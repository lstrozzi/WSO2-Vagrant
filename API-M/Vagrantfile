Vagrant.configure("2") do |config|
    config.vm.box = "centos/8"
    # config.ssh.password = 'vagrant'

    config.vm.define "wso2am" do |wso2am|
	# Hostname
	wso2am.vm.hostname = "wso2am"
	
	# Box configuration
	wso2am.vm.provider "virtualbox" do |vb|
	    vb.name = "t2b WSO2 API Manager (9443)"
	    vb.memory = "4096"
	    vb.cpus = "2"

	    # Display the VirtualBox GUI when booting the machine
	    vb.gui = false
	end

	# Networking
	# Create a forwarded port mapping which allows access to a specific port
	# within the machine from a port on the host machine. In the example below,
	# accessing "localhost:9443" will access port 9443 on the guest machine.
	config.vm.network "forwarded_port", guest: 9443, host: 9443
	# config.vm.network "forwarded_port", guest: 9444, host: 9444
	# config.vm.network "forwarded_port", guest: 9445, host: 9445
	# config.vm.network "forwarded_port", guest: 9446, host: 9446
	# config.vm.network "forwarded_port", guest: 9446, host: 9447

	# Create a private network, which allows host-only access to the machine
	# using a specific IP.
	# config.vm.network "private_network", ip: "192.168.1.12"

	# Create a public network, which generally matched to bridged network.
	# Bridged networks make the machine appear as another physical device on
	# your network.
	# config.vm.network "public_network"

	# Share an additional folder to the guest VM. The first argument is
	# the path on the host to the actual folder. The second argument is
	# the path on the guest to mount the folder. And the optional third
	# argument is a set of non-required options.
	# config.vm.synced_folder "../data", "/vagrant_data"

	# Define a Vagrant Push strategy for pushing to Atlas. Other push strategies
	# such as FTP and Heroku are also available. See the documentation at
	# https://docs.vagrantup.com/v2/push/atlas.html for more information.
	# config.push.define "atlas" do |push|
	#   push.app = "YOUR_ATLAS_USERNAME/YOUR_APPLICATION_NAME"
	# end

	# Enable provisioning with a shell script. Additional provisioners such as
	# Puppet, Chef, Ansible, Salt, and Docker are also available. Please see the
	# documentation for more information about their specific syntax and use.
	# Provisioning shell commands
	# config.vm.provision "homeConfiguration", type: "shell", path: "../Provisioning/homeConfiguration.sh"
	config.vm.provision "basicUtilities",    type: "shell", path: "../Provisioning/basicUtilities.sh"
	config.vm.provision "oracleJDK",         type: "shell", path: "../Provisioning/oracleJDK.sh"
	# config.vm.provision "maven",             type: "shell", path: "../Provisioning/maven.sh"
	# config.vm.provision "rtail",             type: "shell", path: "../Provisioning/rtail.sh"
	# config.vm.provision "mysql",           type: "shell", path: "../Provisioning/mysql.sh"
	# config.vm.provision "wso2AS",          type: "shell", path: "../Provisioning/wso2AS.sh"
	# config.vm.provision "wso2IS",          type: "shell", path: "../Provisioning/wso2IS.sh"
	# config.vm.provision "wso2EI",          type: "shell", path: "../Provisioning/wso2EI.sh"
	config.vm.provision "wso2AM",            type: "shell", path: "../Provisioning/wso2AM.sh"
	
	# enable all in this section for Distributed Deployment
	# config.vm.provision "DistDeb",           type: "shell", path: "../Provisioning/DistDeb.sh"
	
	# config.vm.provision "pizza",             type: "shell", path: "../Provisioning/pizzaShack.sh"
	# config.vm.provision "users",             type: "shell", path: "../Provisioning/users.sh"

    # configuration for the t2b training
	config.vm.provision "t2bTraining",         type: "shell", path: "t2bTraining.sh"

	config.vm.provision "shell", inline: <<-SHELL
        echo "****** REBOOTING... ******"
	    reboot
	SHELL
    end
end
